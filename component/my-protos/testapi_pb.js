// source: testapi.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.ngoapi.EventTuple', null, global);
goog.exportSymbol('proto.ngoapi.StreamEventsRequest', null, global);
goog.exportSymbol('proto.ngoapi.StreamEventsResponse', null, global);
goog.exportSymbol('proto.ngoapi.UUID', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ngoapi.UUID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ngoapi.UUID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ngoapi.UUID.displayName = 'proto.ngoapi.UUID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ngoapi.StreamEventsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ngoapi.StreamEventsRequest.repeatedFields_, null);
};
goog.inherits(proto.ngoapi.StreamEventsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ngoapi.StreamEventsRequest.displayName = 'proto.ngoapi.StreamEventsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ngoapi.EventTuple = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ngoapi.EventTuple, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ngoapi.EventTuple.displayName = 'proto.ngoapi.EventTuple';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ngoapi.StreamEventsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ngoapi.StreamEventsResponse.repeatedFields_, null);
};
goog.inherits(proto.ngoapi.StreamEventsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ngoapi.StreamEventsResponse.displayName = 'proto.ngoapi.StreamEventsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ngoapi.UUID.prototype.toObject = function(opt_includeInstance) {
  return proto.ngoapi.UUID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ngoapi.UUID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ngoapi.UUID.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ngoapi.UUID}
 */
proto.ngoapi.UUID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ngoapi.UUID;
  return proto.ngoapi.UUID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ngoapi.UUID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ngoapi.UUID}
 */
proto.ngoapi.UUID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ngoapi.UUID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ngoapi.UUID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ngoapi.UUID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ngoapi.UUID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.ngoapi.UUID.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ngoapi.UUID} returns this
 */
proto.ngoapi.UUID.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ngoapi.StreamEventsRequest.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ngoapi.StreamEventsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ngoapi.StreamEventsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ngoapi.StreamEventsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ngoapi.StreamEventsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tenantid: (f = msg.getTenantid()) && proto.ngoapi.UUID.toObject(includeInstance, f),
    eventtype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    eventsubtypeList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    eventactionList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    lastindex: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ngoapi.StreamEventsRequest}
 */
proto.ngoapi.StreamEventsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ngoapi.StreamEventsRequest;
  return proto.ngoapi.StreamEventsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ngoapi.StreamEventsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ngoapi.StreamEventsRequest}
 */
proto.ngoapi.StreamEventsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ngoapi.UUID;
      reader.readMessage(value,proto.ngoapi.UUID.deserializeBinaryFromReader);
      msg.setTenantid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventtype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addEventsubtype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addEventaction(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ngoapi.StreamEventsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ngoapi.StreamEventsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ngoapi.StreamEventsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ngoapi.StreamEventsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTenantid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ngoapi.UUID.serializeBinaryToWriter
    );
  }
  f = message.getEventtype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEventsubtypeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getEventactionList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getLastindex();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional UUID tenantId = 1;
 * @return {?proto.ngoapi.UUID}
 */
proto.ngoapi.StreamEventsRequest.prototype.getTenantid = function() {
  return /** @type{?proto.ngoapi.UUID} */ (
    jspb.Message.getWrapperField(this, proto.ngoapi.UUID, 1));
};


/**
 * @param {?proto.ngoapi.UUID|undefined} value
 * @return {!proto.ngoapi.StreamEventsRequest} returns this
*/
proto.ngoapi.StreamEventsRequest.prototype.setTenantid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ngoapi.StreamEventsRequest} returns this
 */
proto.ngoapi.StreamEventsRequest.prototype.clearTenantid = function() {
  return this.setTenantid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ngoapi.StreamEventsRequest.prototype.hasTenantid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string eventType = 2;
 * @return {string}
 */
proto.ngoapi.StreamEventsRequest.prototype.getEventtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ngoapi.StreamEventsRequest} returns this
 */
proto.ngoapi.StreamEventsRequest.prototype.setEventtype = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string eventSubtype = 3;
 * @return {!Array<string>}
 */
proto.ngoapi.StreamEventsRequest.prototype.getEventsubtypeList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ngoapi.StreamEventsRequest} returns this
 */
proto.ngoapi.StreamEventsRequest.prototype.setEventsubtypeList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ngoapi.StreamEventsRequest} returns this
 */
proto.ngoapi.StreamEventsRequest.prototype.addEventsubtype = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ngoapi.StreamEventsRequest} returns this
 */
proto.ngoapi.StreamEventsRequest.prototype.clearEventsubtypeList = function() {
  return this.setEventsubtypeList([]);
};


/**
 * repeated string eventAction = 4;
 * @return {!Array<string>}
 */
proto.ngoapi.StreamEventsRequest.prototype.getEventactionList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ngoapi.StreamEventsRequest} returns this
 */
proto.ngoapi.StreamEventsRequest.prototype.setEventactionList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ngoapi.StreamEventsRequest} returns this
 */
proto.ngoapi.StreamEventsRequest.prototype.addEventaction = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ngoapi.StreamEventsRequest} returns this
 */
proto.ngoapi.StreamEventsRequest.prototype.clearEventactionList = function() {
  return this.setEventactionList([]);
};


/**
 * optional string lastindex = 5;
 * @return {string}
 */
proto.ngoapi.StreamEventsRequest.prototype.getLastindex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ngoapi.StreamEventsRequest} returns this
 */
proto.ngoapi.StreamEventsRequest.prototype.setLastindex = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ngoapi.EventTuple.prototype.toObject = function(opt_includeInstance) {
  return proto.ngoapi.EventTuple.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ngoapi.EventTuple} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ngoapi.EventTuple.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ngoapi.EventTuple}
 */
proto.ngoapi.EventTuple.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ngoapi.EventTuple;
  return proto.ngoapi.EventTuple.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ngoapi.EventTuple} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ngoapi.EventTuple}
 */
proto.ngoapi.EventTuple.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ngoapi.EventTuple.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ngoapi.EventTuple.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ngoapi.EventTuple} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ngoapi.EventTuple.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.ngoapi.EventTuple.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ngoapi.EventTuple} returns this
 */
proto.ngoapi.EventTuple.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.ngoapi.EventTuple.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ngoapi.EventTuple} returns this
 */
proto.ngoapi.EventTuple.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ngoapi.StreamEventsResponse.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ngoapi.StreamEventsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ngoapi.StreamEventsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ngoapi.StreamEventsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ngoapi.StreamEventsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventtype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    eventaction: jspb.Message.getFieldWithDefault(msg, 3, ""),
    eventtupleList: jspb.Message.toObjectList(msg.getEventtupleList(),
    proto.ngoapi.EventTuple.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ngoapi.StreamEventsResponse}
 */
proto.ngoapi.StreamEventsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ngoapi.StreamEventsResponse;
  return proto.ngoapi.StreamEventsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ngoapi.StreamEventsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ngoapi.StreamEventsResponse}
 */
proto.ngoapi.StreamEventsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventtype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventaction(value);
      break;
    case 4:
      var value = new proto.ngoapi.EventTuple;
      reader.readMessage(value,proto.ngoapi.EventTuple.deserializeBinaryFromReader);
      msg.addEventtuple(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ngoapi.StreamEventsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ngoapi.StreamEventsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ngoapi.StreamEventsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ngoapi.StreamEventsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventtype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEventaction();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEventtupleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.ngoapi.EventTuple.serializeBinaryToWriter
    );
  }
};


/**
 * optional string index = 1;
 * @return {string}
 */
proto.ngoapi.StreamEventsResponse.prototype.getIndex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ngoapi.StreamEventsResponse} returns this
 */
proto.ngoapi.StreamEventsResponse.prototype.setIndex = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string eventType = 2;
 * @return {string}
 */
proto.ngoapi.StreamEventsResponse.prototype.getEventtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ngoapi.StreamEventsResponse} returns this
 */
proto.ngoapi.StreamEventsResponse.prototype.setEventtype = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string eventAction = 3;
 * @return {string}
 */
proto.ngoapi.StreamEventsResponse.prototype.getEventaction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ngoapi.StreamEventsResponse} returns this
 */
proto.ngoapi.StreamEventsResponse.prototype.setEventaction = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated EventTuple eventTuple = 4;
 * @return {!Array<!proto.ngoapi.EventTuple>}
 */
proto.ngoapi.StreamEventsResponse.prototype.getEventtupleList = function() {
  return /** @type{!Array<!proto.ngoapi.EventTuple>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ngoapi.EventTuple, 4));
};


/**
 * @param {!Array<!proto.ngoapi.EventTuple>} value
 * @return {!proto.ngoapi.StreamEventsResponse} returns this
*/
proto.ngoapi.StreamEventsResponse.prototype.setEventtupleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.ngoapi.EventTuple=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ngoapi.EventTuple}
 */
proto.ngoapi.StreamEventsResponse.prototype.addEventtuple = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.ngoapi.EventTuple, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ngoapi.StreamEventsResponse} returns this
 */
proto.ngoapi.StreamEventsResponse.prototype.clearEventtupleList = function() {
  return this.setEventtupleList([]);
};


goog.object.extend(exports, proto.ngoapi);
